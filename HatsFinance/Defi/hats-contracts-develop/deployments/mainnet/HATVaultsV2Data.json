{
  "address": "0xadd155731473a9501881234a865ff79668f1b6cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IHATVaultsV2",
          "name": "_hatVaults",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hatVaults",
      "outputs": [
        {
          "internalType": "contract IHATVaultsV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe42f8a2d4a73c4df8ecdc676414dbb2c9b174a00d8bcc8fd052421ad454eb059",
  "receipt": {
    "to": null,
    "from": "0x1885b7c7a3ae1f35ba71c0392c13153a95c4914f",
    "contractAddress": "0xadd155731473a9501881234a865ff79668f1b6cf",
    "transactionIndex": "0xa0",
    "gasUsed": "0x3db9d",
    "logsBloom": "0x
    "blockHash": "0x581ab7dfd5de4318db1f69f5a48d06f1aa353108f9024646e15008d0bea00fc2",
    "transactionHash": "0x32d1d9ddb4442072b8e333f4cf6147bf3eac10840bd81cfd3c35fb91d18b7151",
    "logs": [],
    "blockNumber": "0xfe962f",
    "cumulativeGasUsed": "0xe15b7f",
    "status": "0x1"
  },
  "args": [
    "0xC570c434ba30a2fa5C07E590833246E18aa6B0a3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8186de70a6a6f54b1b5e651788d825b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IHATVaultsV2\",\"name\":\"_hatVaults\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatVaults\",\"outputs\":[{\"internalType\":\"contract IHATVaultsV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/HATVaultsV2Data.sol\":\"HATVaultsV2Data\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IHATVaultsData {\\n    \\n    function getTotalShares(uint256 _pid) external view returns (uint256 totalShares);\\n\\n    function getShares(uint256 _pid, address _user) external view returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0x57f15b8f365e629dbf00096311db54274db0462be30cffc7653c23a824853f96\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHATVaultsV2 {\\n    function hatVaults(uint256 _pid) external view returns (IERC20 hatVault);\\n}\\n\",\"keccak256\":\"0xeadc99ac33e31a6e402f6c054e7855e7fe39734719b4f683fbb11ea7790a2e97\",\"license\":\"MIT\"},\"contracts/nft/HATVaultsV2Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IHATVaultsV2.sol\\\";\\nimport \\\"../interfaces/IHATVaultsData.sol\\\";\\n\\ncontract HATVaultsV2Data is IHATVaultsData {\\n    IHATVaultsV2 public hatVaults;\\n\\n    constructor(IHATVaultsV2 _hatVaults) {\\n        hatVaults = _hatVaults;\\n    }\\n\\n    function getTotalShares(uint256 _pid) external view returns (uint256) {\\n        return hatVaults.hatVaults(_pid).totalSupply();\\n    }\\n\\n    function getShares(uint256 _pid, address _user) external view returns (uint256) {\\n        return hatVaults.hatVaults(_pid).balanceOf(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x3d5e3bb979bb4c6bedf1330e15a270f1834d31840bc24629befc12b53a50fa9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516103be3803806103be83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61032b806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806375c0b9fe1461004657806385fff8581461006c578063b3dc5bde1461007f575b600080fd5b610059610054366004610276565b6100aa565b6040519081526020015b60405180910390f35b61005961007a3660046102a6565b61018a565b600054610092906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b6000805460405162d8dc7760e31b8152600481018590526001600160a01b03909116906306c6e3b890602401602060405180830381865afa1580156100f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011791906102bf565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa15801561015f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018391906102dc565b9392505050565b6000805460405162d8dc7760e31b8152600481018490526001600160a01b03909116906306c6e3b890602401602060405180830381865afa1580156101d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f791906102bf565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025891906102dc565b92915050565b6001600160a01b038116811461027357600080fd5b50565b6000806040838503121561028957600080fd5b82359150602083013561029b8161025e565b809150509250929050565b6000602082840312156102b857600080fd5b5035919050565b6000602082840312156102d157600080fd5b81516101838161025e565b6000602082840312156102ee57600080fd5b505191905056fea2646970667358221220a5b702380a4e2dd514cbb12d25840cb5424c3c293a608cce8f6933e6c2bae8b064736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806375c0b9fe1461004657806385fff8581461006c578063b3dc5bde1461007f575b600080fd5b610059610054366004610276565b6100aa565b6040519081526020015b60405180910390f35b61005961007a3660046102a6565b61018a565b600054610092906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b6000805460405162d8dc7760e31b8152600481018590526001600160a01b03909116906306c6e3b890602401602060405180830381865afa1580156100f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011791906102bf565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa15801561015f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018391906102dc565b9392505050565b6000805460405162d8dc7760e31b8152600481018490526001600160a01b03909116906306c6e3b890602401602060405180830381865afa1580156101d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f791906102bf565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025891906102dc565b92915050565b6001600160a01b038116811461027357600080fd5b50565b6000806040838503121561028957600080fd5b82359150602083013561029b8161025e565b809150509250929050565b6000602082840312156102b857600080fd5b5035919050565b6000602082840312156102d157600080fd5b81516101838161025e565b6000602082840312156102ee57600080fd5b505191905056fea2646970667358221220a5b702380a4e2dd514cbb12d25840cb5424c3c293a608cce8f6933e6c2bae8b064736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21074,
        "contract": "contracts/nft/HATVaultsV2Data.sol:HATVaultsV2Data",
        "label": "hatVaults",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IHATVaultsV2)18860"
      }
    ],
    "types": {
      "t_contract(IHATVaultsV2)18860": {
        "encoding": "inplace",
        "label": "contract IHATVaultsV2",
        "numberOfBytes": "20"
      }
    }
  }
}