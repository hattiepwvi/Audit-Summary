{
  "address": "0x225A2A0Dea1357c808B4eb8BC423507dD4bbc401",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_merkleTreeIPFSRef",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "merkleTreeIPFSRef",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "MerkleTreeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "VaultPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "VaultResumed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTierFromShares",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTiersToRedeemFromShares",
      "outputs": [
        {
          "internalType": "bool[3]",
          "name": "tiers",
          "type": "bool[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getVaultId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "pauseVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pausedVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "hatVaults",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "redeemMultipleFromShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "hatVaults",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "tiers",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        }
      ],
      "name": "redeemMultipleFromTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "redeemSingleFromShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "redeemSingleFromTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hatVaults",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "resumeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensRedeemed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_merkleTreeIPFSRef",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "updateTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vaultsRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8d8c14407e0f807361f937ba3ce9d74d72d05ebf7597641511ce29fe4ad1f8a",
  "receipt": {
    "to": null,
    "from": "0x1885B7c7a3AE1F35BA71C0392C13153A95c4914f",
    "contractAddress": "0x225A2A0Dea1357c808B4eb8BC423507dD4bbc401",
    "transactionIndex": 167,
    "gasUsed": "2700829",
    "logsBloom": "0x
    "blockHash": "0x2da17b97811d8315ae8d855e414fd167e8f707f464f77aff345af0822808f17e",
    "transactionHash": "0xc8d8c14407e0f807361f937ba3ce9d74d72d05ebf7597641511ce29fe4ad1f8a",
    "logs": [
      {
        "transactionIndex": 167,
        "blockNumber": 16684605,
        "transactionHash": "0xc8d8c14407e0f807361f937ba3ce9d74d72d05ebf7597641511ce29fe4ad1f8a",
        "address": "0x225A2A0Dea1357c808B4eb8BC423507dD4bbc401",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "data": "0x",
        "logIndex": 209,
        "blockHash": "0x2da17b97811d8315ae8d855e414fd167e8f707f464f77aff345af0822808f17e"
      },
      {
        "transactionIndex": 167,
        "blockNumber": 16684605,
        "transactionHash": "0xc8d8c14407e0f807361f937ba3ce9d74d72d05ebf7597641511ce29fe4ad1f8a",
        "address": "0x225A2A0Dea1357c808B4eb8BC423507dD4bbc401",
        "topics": [
          "0x0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063f6291b0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 210,
        "blockHash": "0x2da17b97811d8315ae8d855e414fd167e8f707f464f77aff345af0822808f17e"
      }
    ],
    "blockNumber": 16684605,
    "cumulativeGasUsed": "11675597",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    1677076763
  ],
  "numDeployments": 2,
  "solcInputHash": "8186de70a6a6f54b1b5e651788d825b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_merkleTreeIPFSRef\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"merkleTreeIPFSRef\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"MerkleTreeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"VaultPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"VaultResumed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTierFromShares\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTiersToRedeemFromShares\",\"outputs\":[{\"internalType\":\"bool[3]\",\"name\":\"tiers\",\"type\":\"bool[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getVaultId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pausedVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hatVaults\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeemMultipleFromShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hatVaults\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"tiers\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"redeemMultipleFromTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeemSingleFromShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"redeemSingleFromTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatVaults\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"resumeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_merkleTreeIPFSRef\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"updateTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vaultsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Returns thze total tokens minted so far.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTree(string,bytes32,uint256)\":{\"details\":\"Update the merkle tree root only after  the deadline for minting has been reached.\",\"params\":{\"_deadline\":\"number of days to the next minting deadline.\",\"_merkleTreeIPFSRef\":\"new merkle tree ipfs reference.\",\"_root\":\"new merkle tree root to use for verifying.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/HATVaultsNFT.sol\":\"HATVaultsNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/interfaces/IHATVaultsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IHATVaultsData {\\n    \\n    function getTotalShares(uint256 _pid) external view returns (uint256 totalShares);\\n\\n    function getShares(uint256 _pid, address _user) external view returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0x57f15b8f365e629dbf00096311db54274db0462be30cffc7653c23a824853f96\",\"license\":\"MIT\"},\"contracts/nft/HATVaultsNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IHATVaultsData.sol\\\";\\n\\n/*\\nAn NFT contract that mints specail tokens for each vault of\\nthe HATVaults system.\\n@note: Thoroughout the whole contract, the HATVaults address \\n       should always be the wrapper contract, not the actual\\n       HATVaults contract\\n*/\\ncontract HATVaultsNFT is ERC1155, Ownable {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public root;\\n    Counters.Counter public totalSupplyCounter;\\n    uint256 public deadline;\\n\\n    uint256 public constant HUNDRED_PERCENT = 10000;\\n    uint256 public constant TIERS = 3;\\n\\n    mapping(bytes32 => bool) public pausedVaults;\\n    mapping(bytes32 => bool) public vaultsRegistered;\\n    mapping(uint256 => mapping(address => bool)) public tokensRedeemed;\\n\\n    mapping(uint256 => string) public uris;\\n\\n    event MerkleTreeChanged(string merkleTreeIPFSRef, bytes32 root, uint256 deadline);\\n    event VaultPaused(address indexed hatVaults, uint256 indexed pid);\\n    event VaultResumed(address indexed hatVaults, uint256 indexed pid);\\n\\n    modifier notPaused(address hatVaults, uint256 pid) {\\n        require(!pausedVaults[keccak256(abi.encodePacked(hatVaults, pid))], \\\"Vault paused\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _merkleTreeIPFSRef,\\n        bytes32 _root,\\n        uint256 _deadline\\n    // solhint-disable-next-line func-visibility\\n    ) ERC1155(\\\"\\\") {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp < _deadline, \\\"Deadline already passed\\\");\\n        root = _root;\\n        deadline = _deadline;\\n        emit MerkleTreeChanged(_merkleTreeIPFSRef, _root, _deadline);\\n    }\\n\\n    function addVault(address hatVaults, uint256 pid, string memory _uri) external onlyOwner {\\n        require(!vaultsRegistered[getVaultId(hatVaults, pid)], \\\"Vault already exists\\\");\\n        vaultsRegistered[getVaultId(hatVaults, pid)] = true;\\n        for(uint8 i = 1; i <= TIERS; i++) {\\n            uris[getTokenId(hatVaults, pid, i)] = string(abi.encodePacked(_uri, Strings.toString(i)));\\n        }\\n    }\\n\\n    function pauseVault(address hatVaults, uint256 pid) external onlyOwner {\\n        pausedVaults[keccak256(abi.encodePacked(hatVaults, pid))] = true;\\n        emit VaultPaused(hatVaults, pid);\\n    }\\n\\n\\n    function resumeVault(address hatVaults, uint256 pid) external onlyOwner {\\n        pausedVaults[keccak256(abi.encodePacked(hatVaults, pid))] = false;\\n        emit VaultResumed(hatVaults, pid);\\n    }\\n\\n    /**\\n     * @dev Update the merkle tree root only after \\n     * the deadline for minting has been reached.\\n     * @param _merkleTreeIPFSRef new merkle tree ipfs reference.\\n     * @param _root new merkle tree root to use for verifying.\\n     * @param _deadline number of days to the next minting deadline.\\n     */\\n    function updateTree(string memory _merkleTreeIPFSRef, bytes32 _root, uint256 _deadline) external onlyOwner {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp > deadline, \\\"Minting deadline was not reached\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp < _deadline, \\\"New deadline already passed\\\");\\n        root = _root;\\n        deadline = _deadline;\\n        emit MerkleTreeChanged(_merkleTreeIPFSRef, _root, _deadline);\\n    }\\n\\n    function redeemMultipleFromTree(\\n        address[] calldata hatVaults,\\n        uint256[] calldata pids,\\n        address account,\\n        uint8[] calldata tiers,\\n        bytes32[][] calldata proofs\\n    ) external {\\n        uint256 arraysLength = hatVaults.length;\\n        require(arraysLength == pids.length, \\\"Arrays lengths must match\\\");\\n        require(arraysLength == tiers.length, \\\"Arrays lengths must match\\\");\\n        require(arraysLength == proofs.length, \\\"Arrays lengths must match\\\");\\n        for (uint256 i = 0; i < arraysLength; i++) {\\n            redeemSingleFromTree(hatVaults[i], pids[i], account, tiers[i], proofs[i]);\\n        }\\n    }\\n\\n    function redeemSingleFromTree(\\n        address hatVaults,\\n        uint256 pid,\\n        address account,\\n        uint8 tier,\\n        bytes32[] calldata proof\\n    ) public notPaused(hatVaults, pid) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp < deadline, \\\"Minting deadline passed\\\");\\n        require(_verify(proof, _leaf(hatVaults, pid, account, tier)), \\\"Invalid merkle proof\\\");\\n        _mintTokens(hatVaults, pid, account, tier);\\n    }\\n\\n    function redeemMultipleFromShares(\\n        address[] calldata hatVaults,\\n        uint256[] calldata pids,\\n        address account\\n    ) external {\\n        uint256 arraysLength = hatVaults.length;\\n        require(arraysLength == pids.length, \\\"Arrays lengths must match\\\");\\n        for (uint256 i = 0; i < arraysLength; i++) {\\n            redeemSingleFromShares(hatVaults[i], pids[i], account);\\n        }\\n    }\\n\\n    function redeemSingleFromShares(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) public {\\n        uint8 tier = getTierFromShares(hatVaults, pid, account);\\n        if (tier != 0) {\\n            _mintTokens(hatVaults, pid, account, tier);\\n        } \\n    }\\n\\n    function _mintTokens(\\n        address hatVaults,\\n        uint256 pid,\\n        address account,\\n        uint8 tier\\n    ) internal {\\n        require(vaultsRegistered[getVaultId(hatVaults, pid)], \\\"Token does not exist\\\");\\n        for(uint8 i = 1; i <= tier; i++) {\\n            if (!tokensRedeemed[getTokenId(hatVaults, pid, i)][account]) {\\n                tokensRedeemed[getTokenId(hatVaults, pid, i)][account] = true;\\n                _mint(account, getTokenId(hatVaults, pid, i));\\n            }\\n        }\\n    }\\n\\n    function _leaf(address _hatVaults, uint256 _pid, address _account, uint8 _tier) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_hatVaults, _pid, _account, _tier));\\n    }\\n\\n    function _verify(bytes32[] calldata proof, bytes32 leaf) internal view returns (bool) {\\n        return MerkleProof.verifyCalldata(proof, root, leaf);\\n    }\\n\\n    function _mint(address to, uint256 id) internal {\\n        totalSupplyCounter.increment();\\n        super._mint(to, id, 1, \\\"\\\");\\n    }\\n\\n    function getTierFromShares(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) public view notPaused(hatVaults, pid) returns(uint8) {\\n        uint256 shares = IHATVaultsData(hatVaults).getShares(pid, account);\\n        uint256 totalShares = IHATVaultsData(hatVaults).getTotalShares(pid);\\n        require(totalShares != 0, \\\"Pool is empty\\\");\\n        uint16[3] memory tierPercents = [10, 100, 1500];\\n        uint8 tier = 0;\\n\\n        for(uint8 i = 0; i < tierPercents.length; i++) {\\n            if (shares < totalShares * tierPercents[i] / HUNDRED_PERCENT) {\\n                break;\\n            }\\n            tier++;\\n        }\\n\\n        return tier;\\n    }\\n\\n    function getTiersToRedeemFromShares(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) external view returns(bool[3] memory tiers) {\\n        require(vaultsRegistered[getVaultId(hatVaults, pid)], \\\"Token does not exist\\\");\\n        for(uint8 i = 1; i <= getTierFromShares(hatVaults, pid, account); i++) {\\n            if (!tokensRedeemed[getTokenId(hatVaults, pid, i)][account]) {\\n                tiers[i - 1] = true;\\n            }\\n        }\\n    }\\n\\n    function isEligible(\\n        address hatVaults,\\n        uint256 pid,\\n        address account\\n    ) external view returns(bool) {\\n        uint8 tier = getTierFromShares(hatVaults, pid, account);\\n        return tier != 0 && (vaultsRegistered[getVaultId(hatVaults, pid)] && !tokensRedeemed[getTokenId(hatVaults, pid, tier)][account]);\\n    }\\n\\n    function getTokenId(\\n        address hatVaults,\\n        uint256 pid,\\n        uint8 tier\\n    ) public pure returns(uint256) {\\n        return uint256(keccak256(abi.encodePacked(hatVaults, pid, tier)));\\n    }\\n\\n    function getVaultId(\\n        address hatVaults,\\n        uint256 pid\\n    ) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(hatVaults, pid));\\n    }\\n\\n    /**\\n        @dev Returns thze total tokens minted so far.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupplyCounter.current();\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return uris[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x6f4b8c2663cfebb526cb9b4e4434788386b9eb6b832897f62fd7083f7870ae5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032bd380380620032bd83398101604081905262000034916200019f565b6040805160208101909152600081526200004e81620000ff565b506200005a3362000111565b804210620000ae5760405162461bcd60e51b815260206004820152601760248201527f446561646c696e6520616c726561647920706173736564000000000000000000604482015260640160405180910390fd5b600482905560068190556040517f0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed890620000ee908590859085906200026a565b60405180910390a150505062000409565b60026200010d82826200033d565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001965781810151838201526020016200017c565b50506000910152565b600080600060608486031215620001b557600080fd5b83516001600160401b0380821115620001cd57600080fd5b818601915086601f830112620001e257600080fd5b815181811115620001f757620001f762000163565b604051601f8201601f19908116603f0116810190838211818310171562000222576200022262000163565b816040528281528960208487010111156200023c57600080fd5b6200024f83602083016020880162000179565b6020890151604090990151909a989950979650505050505050565b60608152600084518060608401526200028b81608085016020890162000179565b60208301949094525060408101919091526080601f909201601f19160101919050565b600181811c90821680620002c357607f821691505b602082108103620002e457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033857600081815260208120601f850160051c81016020861015620003135750805b601f850160051c820191505b8181101562000334578281556001016200031f565b5050505b505050565b81516001600160401b0381111562000359576200035962000163565b62000371816200036a8454620002ae565b84620002ea565b602080601f831160018114620003a95760008415620003905750858301515b600019600386901b1c1916600185901b17855562000334565b600085815260208120601f198616915b82811015620003da57888601518255948401946001909101908401620003b9565b5085821015620003f95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612ea480620004196000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c80636ed93dd01161011a578063d01f5932116100ad578063e985e9c51161007c578063e985e9c514610494578063ebf0c717146104d0578063f242432a146104d9578063f2fde38b146104ec578063f9beb740146104ff57600080fd5b8063d01f593214610448578063db833f001461045b578063df773e341461046e578063e591ed891461048157600080fd5b8063a22cb465116100e9578063a22cb465146103e1578063a943840a146103f4578063c9e7d50a14610407578063ceb120fa1461043557600080fd5b80636ed93dd0146103a2578063715018a6146103ab5780637c7cd785146103b35780638da5cb5b146103c657600080fd5b8063230ad5cc1161019d5780633917dac51161016c5780633917dac51461033457806339731d911461035457806339efae52146103675780634e1273f41461037a5780636e748f971461039a57600080fd5b8063230ad5cc146102d05780632335570b146102f357806329dcb0cf146103185780632eb2c2d61461032157600080fd5b80631253c546116101d95780631253c5461461028857806318160ddd1461029b57806319636585146102a3578063204a875a146102c657600080fd5b8062fdd58e1461020a57806301ffc9a71461023057806302524936146102535780630e89341c14610268575b600080fd5b61021d610218366004612019565b610512565b6040519081526020015b60405180910390f35b61024361023e366004612059565b6105ab565b6040519015158152602001610227565b6102666102613660046120c1565b6105fb565b005b61027b61027636600461219a565b610712565b6040516102279190612203565b61027b61029636600461219a565b6107b4565b61021d61084e565b6102436102b136600461219a565b60076020526000908152604090205460ff1681565b60055461021d9081565b6102436102de36600461219a565b60086020526000908152604090205460ff1681565b610306610301366004612216565b61085e565b60405160ff9091168152602001610227565b61021d60065481565b61026661032f36600461239b565b610a9c565b610347610342366004612216565b610ae8565b6040516102279190612444565b61021d610362366004612488565b610bf1565b61021d610375366004612019565b610c44565b61038d6103883660046124bb565b610c77565b60405161022791906125c0565b61021d600381565b61021d61271081565b610266610d98565b6102666103c13660046125d3565b610dac565b6003546040516001600160a01b039091168152602001610227565b6102666103ef366004612653565b610e3b565b610266610402366004612019565b610e4a565b61024361041536600461268f565b600960209081526000928352604080842090915290825290205460ff1681565b6102666104433660046126bb565b610ee1565b610266610456366004612708565b610fd4565b610266610469366004612019565b6110ee565b61026661047c366004612216565b611185565b61024361048f366004612216565b6111a9565b6102436104a236600461275e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61021d60045481565b6102666104e7366004612788565b611233565b6102666104fa3660046127ec565b611278565b61026661050d366004612807565b6112f1565b60006001600160a01b0383166105825760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806105dc57506001600160e01b031982166303a24d0760e21b145b806105a557506301ffc9a760e01b6001600160e01b03198316146105a5565b8786811461061b5760405162461bcd60e51b815260040161057990612885565b80841461063a5760405162461bcd60e51b815260040161057990612885565b8082146106595760405162461bcd60e51b815260040161057990612885565b60005b81811015610705576106f38b8b83818110610679576106796128bc565b905060200201602081019061068e91906127ec565b8a8a848181106106a0576106a06128bc565b90506020020135898989868181106106ba576106ba6128bc565b90506020020160208101906106cf91906128d2565b8888878181106106e1576106e16128bc565b905060200281019061050d91906128ed565b806106fd8161294c565b91505061065c565b5050505050505050505050565b6000818152600a6020526040902080546060919061072f90612965565b80601f016020809104026020016040519081016040528092919081815260200182805461075b90612965565b80156107a85780601f1061077d576101008083540402835291602001916107a8565b820191906000526020600020905b81548152906001019060200180831161078b57829003601f168201915b50505050509050919050565b600a60205260009081526040902080546107cd90612965565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990612965565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b600061085960055490565b905090565b6000838360076000838360405160200161087992919061299f565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16156108de5760405162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081c185d5cd95960a21b6044820152606401610579565b604051633ae05cff60e11b8152600481018690526001600160a01b038581166024830152600091908816906375c0b9fe90604401602060405180830381865afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095391906129bc565b6040516310bfff0b60e31b8152600481018890529091506000906001600160a01b038916906385fff85890602401602060405180830381865afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c291906129bc565b905080600003610a045760405162461bcd60e51b815260206004820152600d60248201526c506f6f6c20697320656d70747960981b6044820152606401610579565b60408051606081018252600a8152606460208201526105dc918101919091526000805b60038160ff161015610a8e57612710838260ff1660038110610a4b57610a4b6128bc565b6020020151610a5e9061ffff16866129d5565b610a6891906129f4565b8510610a8e5781610a7881612a16565b9250508080610a8690612a16565b915050610a27565b509998505050505050505050565b6001600160a01b038516331480610ab85750610ab885336104a2565b610ad45760405162461bcd60e51b815260040161057990612a35565b610ae18585858585611480565b5050505050565b610af0611fdf565b60086000610afe8686610c44565b815260208101919091526040016000205460ff16610b555760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610579565b60015b610b6385858561085e565b60ff168160ff1611610be95760096000610b7e878785610bf1565b8152602080820192909252604090810160009081206001600160a01b038716825290925290205460ff16610bd757600182610bb98284612a83565b60ff1660038110610bcc57610bcc6128bc565b911515602090920201525b80610be181612a16565b915050610b58565b509392505050565b6040805160609490941b6001600160601b031916602080860191909152603485019390935260f89190911b6001600160f81b03191660548401528051603581850301815260559093019052815191012090565b60008282604051602001610c5992919061299f565b60405160208183030381529060405280519060200120905092915050565b60608151835114610cdc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610579565b600083516001600160401b03811115610cf757610cf7612252565b604051908082528060200260200182016040528015610d20578160200160208202803683370190505b50905060005b8451811015610be957610d6b858281518110610d4457610d446128bc565b6020026020010151858381518110610d5e57610d5e6128bc565b6020026020010151610512565b828281518110610d7d57610d7d6128bc565b6020908102919091010152610d918161294c565b9050610d26565b610da061165d565b610daa60006116b7565b565b83828114610dcc5760405162461bcd60e51b815260040161057990612885565b60005b81811015610e3257610e20878783818110610dec57610dec6128bc565b9050602002016020810190610e0191906127ec565b868684818110610e1357610e136128bc565b9050602002013585611185565b80610e2a8161294c565b915050610dcf565b50505050505050565b610e46338383611709565b5050565b610e5261165d565b6000600760008484604051602001610e6b92919061299f565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555080826001600160a01b03167f5e8526ee3954b37e3817ddd2a2af5028e0bd006511f190d1deeb43d15d0a18cd60405160405180910390a35050565b610ee961165d565b6006544211610f3a5760405162461bcd60e51b815260206004820181905260248201527f4d696e74696e6720646561646c696e6520776173206e6f7420726561636865646044820152606401610579565b804210610f895760405162461bcd60e51b815260206004820152601b60248201527f4e657720646561646c696e6520616c72656164792070617373656400000000006044820152606401610579565b600482905560068190556040517f0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed890610fc790859085908590612a9c565b60405180910390a1505050565b610fdc61165d565b60086000610fea8585610c44565b815260208101919091526040016000205460ff16156110425760405162461bcd60e51b81526020600482015260146024820152735661756c7420616c72656164792065786973747360601b6044820152606401610579565b6001600860006110528686610c44565b81526020810191909152604001600020805460ff191691151591909117905560015b60038160ff16116110e8578161108c8260ff166117e9565b60405160200161109d929190612ac1565b604051602081830303815290604052600a60006110bb878786610bf1565b815260200190815260200160002090816110d59190612b3b565b50806110e081612a16565b915050611074565b50505050565b6110f661165d565b600160076000848460405160200161110f92919061299f565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555080826001600160a01b03167f57847ecb0caf57ab272aebf4d12c2e00b717d17e11280577d5302fd2f6a901ae60405160405180910390a35050565b600061119284848461085e565b905060ff8116156110e8576110e88484848461187b565b6000806111b785858561085e565b905060ff81161580159061122a5750600860006111d48787610c44565b815260208101919091526040016000205460ff16801561122a5750600960006111fe878785610bf1565b8152602080820192909252604090810160009081206001600160a01b038716825290925290205460ff16155b95945050505050565b6001600160a01b03851633148061124f575061124f85336104a2565b61126b5760405162461bcd60e51b815260040161057990612a35565b610ae18585858585611999565b61128061165d565b6001600160a01b0381166112e55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610579565b6112ee816116b7565b50565b858560076000838360405160200161130a92919061299f565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161561136f5760405162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081c185d5cd95960a21b6044820152606401610579565b60065442106113c05760405162461bcd60e51b815260206004820152601760248201527f4d696e74696e6720646561646c696e65207061737365640000000000000000006044820152606401610579565b6040805160608a811b6001600160601b0319908116602080850191909152603484018c9052918a901b16605483015260f888901b6001600160f81b031916606883015282516049818403018152606990920190925280519101206114279085908590611ac3565b61146a5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21036b2b935b63290383937b7b360611b6044820152606401610579565b6114768888888861187b565b5050505050505050565b81518351146114e25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610579565b6001600160a01b0384166115085760405162461bcd60e51b815260040161057990612bfa565b3360005b84518110156115ef576000858281518110611529576115296128bc565b602002602001015190506000858381518110611547576115476128bc565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156115975760405162461bcd60e51b815260040161057990612c3f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906115d4908490612c89565b92505081905550505050806115e89061294c565b905061150c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161163f929190612c9c565b60405180910390a4611655818787878787611adb565b505050505050565b6003546001600160a01b03163314610daa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610579565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361177c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610579565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606060006117f683611c36565b60010190506000816001600160401b0381111561181557611815612252565b6040519080825280601f01601f19166020018201604052801561183f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461184957509392505050565b600860006118898686610c44565b815260208101919091526040016000205460ff166118e05760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610579565b60015b8160ff168160ff1611610ae157600960006118ff878785610bf1565b8152602080820192909252604090810160009081206001600160a01b038716825290925290205460ff166119875760016009600061193e888886610bf1565b8152602080820192909252604090810160009081206001600160a01b03881682529092529020805460ff191691151591909117905561198783611982878785610bf1565b611d0e565b8061199181612a16565b9150506118e3565b6001600160a01b0384166119bf5760405162461bcd60e51b815260040161057990612bfa565b3360006119cb85611d38565b905060006119d885611d38565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015611a1b5760405162461bcd60e51b815260040161057990612c3f565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611a58908490612c89565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ab8848a8a8a8a8a611d83565b505050505050505050565b6000611ad3848460045485611e3e565b949350505050565b6001600160a01b0384163b156116555760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b1f9089908990889088908890600401612cc1565b6020604051808303816000875af1925050508015611b5a575060408051601f3d908101601f19168201909252611b5791810190612d1f565b60015b611c0657611b66612d3c565b806308c379a003611b9f5750611b7a612d58565b80611b855750611ba1565b8060405162461bcd60e51b81526004016105799190612203565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610579565b6001600160e01b0319811663bc197c8160e01b14610e325760405162461bcd60e51b815260040161057990612de1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611c755772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ca1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611cbf57662386f26fc10000830492506010015b6305f5e1008310611cd7576305f5e100830492506008015b6127108310611ceb57612710830492506004015b60648310611cfd576064830492506002015b600a83106105a55760010192915050565b611d1c600580546001019055565b610e468282600160405180602001604052806000815250611e56565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d7257611d726128bc565b602090810291909101015292915050565b6001600160a01b0384163b156116555760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611dc79089908990889088908890600401612e29565b6020604051808303816000875af1925050508015611e02575060408051601f3d908101601f19168201909252611dff91810190612d1f565b60015b611e0e57611b66612d3c565b6001600160e01b0319811663f23a6e6160e01b14610e325760405162461bcd60e51b815260040161057990612de1565b600082611e4c868685611f61565b1495945050505050565b6001600160a01b038416611eb65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610579565b336000611ec285611d38565b90506000611ecf85611d38565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611f01908490612c89565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e3283600089898989611d83565b600081815b84811015611fa457611f9082878784818110611f8457611f846128bc565b90506020020135611fad565b915080611f9c8161294c565b915050611f66565b50949350505050565b6000818310611fc9576000828152602084905260409020611fd8565b60008381526020839052604090205b9392505050565b60405180606001604052806003906020820280368337509192915050565b80356001600160a01b038116811461201457600080fd5b919050565b6000806040838503121561202c57600080fd5b61203583611ffd565b946020939093013593505050565b6001600160e01b0319811681146112ee57600080fd5b60006020828403121561206b57600080fd5b8135611fd881612043565b60008083601f84011261208857600080fd5b5081356001600160401b0381111561209f57600080fd5b6020830191508360208260051b85010111156120ba57600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156120df57600080fd5b89356001600160401b03808211156120f657600080fd5b6121028d838e01612076565b909b50995060208c013591508082111561211b57600080fd5b6121278d838e01612076565b909950975087915061213b60408d01611ffd565b965060608c013591508082111561215157600080fd5b61215d8d838e01612076565b909650945060808c013591508082111561217657600080fd5b506121838c828d01612076565b915080935050809150509295985092959850929598565b6000602082840312156121ac57600080fd5b5035919050565b60005b838110156121ce5781810151838201526020016121b6565b50506000910152565b600081518084526121ef8160208601602086016121b3565b601f01601f19169290920160200192915050565b602081526000611fd860208301846121d7565b60008060006060848603121561222b57600080fd5b61223484611ffd565b92506020840135915061224960408501611ffd565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561228d5761228d612252565b6040525050565b60006001600160401b038211156122ad576122ad612252565b5060051b60200190565b600082601f8301126122c857600080fd5b813560206122d582612294565b6040516122e28282612268565b83815260059390931b850182019282810191508684111561230257600080fd5b8286015b8481101561231d5780358352918301918301612306565b509695505050505050565b600082601f83011261233957600080fd5b81356001600160401b0381111561235257612352612252565b604051612369601f8301601f191660200182612268565b81815284602083860101111561237e57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156123b357600080fd5b6123bc86611ffd565b94506123ca60208701611ffd565b935060408601356001600160401b03808211156123e657600080fd5b6123f289838a016122b7565b9450606088013591508082111561240857600080fd5b61241489838a016122b7565b9350608088013591508082111561242a57600080fd5b5061243788828901612328565b9150509295509295909350565b60608101818360005b600381101561246e578151151583526020928301929091019060010161244d565b50505092915050565b803560ff8116811461201457600080fd5b60008060006060848603121561249d57600080fd5b6124a684611ffd565b92506020840135915061224960408501612477565b600080604083850312156124ce57600080fd5b82356001600160401b03808211156124e557600080fd5b818501915085601f8301126124f957600080fd5b8135602061250682612294565b6040516125138282612268565b83815260059390931b850182019282810191508984111561253357600080fd5b948201945b838610156125585761254986611ffd565b82529482019490820190612538565b9650508601359250508082111561256e57600080fd5b5061257b858286016122b7565b9150509250929050565b600081518084526020808501945080840160005b838110156125b557815187529582019590820190600101612599565b509495945050505050565b602081526000611fd86020830184612585565b6000806000806000606086880312156125eb57600080fd5b85356001600160401b038082111561260257600080fd5b61260e89838a01612076565b9097509550602088013591508082111561262757600080fd5b5061263488828901612076565b9094509250612647905060408701611ffd565b90509295509295909350565b6000806040838503121561266657600080fd5b61266f83611ffd565b91506020830135801515811461268457600080fd5b809150509250929050565b600080604083850312156126a257600080fd5b823591506126b260208401611ffd565b90509250929050565b6000806000606084860312156126d057600080fd5b83356001600160401b038111156126e657600080fd5b6126f286828701612328565b9660208601359650604090950135949350505050565b60008060006060848603121561271d57600080fd5b61272684611ffd565b92506020840135915060408401356001600160401b0381111561274857600080fd5b61275486828701612328565b9150509250925092565b6000806040838503121561277157600080fd5b61277a83611ffd565b91506126b260208401611ffd565b600080600080600060a086880312156127a057600080fd5b6127a986611ffd565b94506127b760208701611ffd565b9350604086013592506060860135915060808601356001600160401b038111156127e057600080fd5b61243788828901612328565b6000602082840312156127fe57600080fd5b611fd882611ffd565b60008060008060008060a0878903121561282057600080fd5b61282987611ffd565b95506020870135945061283e60408801611ffd565b935061284c60608801612477565b925060808701356001600160401b0381111561286757600080fd5b61287389828a01612076565b979a9699509497509295939492505050565b60208082526019908201527f417272617973206c656e67746873206d757374206d6174636800000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156128e457600080fd5b611fd882612477565b6000808335601e1984360301811261290457600080fd5b8301803591506001600160401b0382111561291e57600080fd5b6020019150600581901b36038213156120ba57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161295e5761295e612936565b5060010190565b600181811c9082168061297957607f821691505b60208210810361299957634e487b7160e01b600052602260045260246000fd5b50919050565b60609290921b6001600160601b0319168252601482015260340190565b6000602082840312156129ce57600080fd5b5051919050565b60008160001904831182151516156129ef576129ef612936565b500290565b600082612a1157634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8103612a2c57612a2c612936565b60010192915050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60ff82811682821603908111156105a5576105a5612936565b606081526000612aaf60608301866121d7565b60208301949094525060400152919050565b60008351612ad38184602088016121b3565b835190830190612ae78183602088016121b3565b01949350505050565b601f821115612b3657600081815260208120601f850160051c81016020861015612b175750805b601f850160051c820191505b8181101561165557828155600101612b23565b505050565b81516001600160401b03811115612b5457612b54612252565b612b6881612b628454612965565b84612af0565b602080601f831160018114612b9d5760008415612b855750858301515b600019600386901b1c1916600185901b178555611655565b600085815260208120601f198616915b82811015612bcc57888601518255948401946001909101908401612bad565b5085821015612bea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156105a5576105a5612936565b604081526000612caf6040830185612585565b828103602084015261122a8185612585565b6001600160a01b0386811682528516602082015260a060408201819052600090612ced90830186612585565b8281036060840152612cff8186612585565b90508281036080840152612d1381856121d7565b98975050505050505050565b600060208284031215612d3157600080fd5b8151611fd881612043565b600060033d1115612d555760046000803e5060005160e01c5b90565b600060443d1015612d665790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612d9557505050505090565b8285019150815181811115612dad5750505050505090565b843d8701016020828501011115612dc75750505050505090565b612dd660208286010187612268565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612e63908301846121d7565b97965050505050505056fea2646970667358221220f5d2d2e9046fcc975818f469d7dddf410621234dbce75ff0ed48c1c856658bb964736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c80636ed93dd01161011a578063d01f5932116100ad578063e985e9c51161007c578063e985e9c514610494578063ebf0c717146104d0578063f242432a146104d9578063f2fde38b146104ec578063f9beb740146104ff57600080fd5b8063d01f593214610448578063db833f001461045b578063df773e341461046e578063e591ed891461048157600080fd5b8063a22cb465116100e9578063a22cb465146103e1578063a943840a146103f4578063c9e7d50a14610407578063ceb120fa1461043557600080fd5b80636ed93dd0146103a2578063715018a6146103ab5780637c7cd785146103b35780638da5cb5b146103c657600080fd5b8063230ad5cc1161019d5780633917dac51161016c5780633917dac51461033457806339731d911461035457806339efae52146103675780634e1273f41461037a5780636e748f971461039a57600080fd5b8063230ad5cc146102d05780632335570b146102f357806329dcb0cf146103185780632eb2c2d61461032157600080fd5b80631253c546116101d95780631253c5461461028857806318160ddd1461029b57806319636585146102a3578063204a875a146102c657600080fd5b8062fdd58e1461020a57806301ffc9a71461023057806302524936146102535780630e89341c14610268575b600080fd5b61021d610218366004612019565b610512565b6040519081526020015b60405180910390f35b61024361023e366004612059565b6105ab565b6040519015158152602001610227565b6102666102613660046120c1565b6105fb565b005b61027b61027636600461219a565b610712565b6040516102279190612203565b61027b61029636600461219a565b6107b4565b61021d61084e565b6102436102b136600461219a565b60076020526000908152604090205460ff1681565b60055461021d9081565b6102436102de36600461219a565b60086020526000908152604090205460ff1681565b610306610301366004612216565b61085e565b60405160ff9091168152602001610227565b61021d60065481565b61026661032f36600461239b565b610a9c565b610347610342366004612216565b610ae8565b6040516102279190612444565b61021d610362366004612488565b610bf1565b61021d610375366004612019565b610c44565b61038d6103883660046124bb565b610c77565b60405161022791906125c0565b61021d600381565b61021d61271081565b610266610d98565b6102666103c13660046125d3565b610dac565b6003546040516001600160a01b039091168152602001610227565b6102666103ef366004612653565b610e3b565b610266610402366004612019565b610e4a565b61024361041536600461268f565b600960209081526000928352604080842090915290825290205460ff1681565b6102666104433660046126bb565b610ee1565b610266610456366004612708565b610fd4565b610266610469366004612019565b6110ee565b61026661047c366004612216565b611185565b61024361048f366004612216565b6111a9565b6102436104a236600461275e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61021d60045481565b6102666104e7366004612788565b611233565b6102666104fa3660046127ec565b611278565b61026661050d366004612807565b6112f1565b60006001600160a01b0383166105825760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806105dc57506001600160e01b031982166303a24d0760e21b145b806105a557506301ffc9a760e01b6001600160e01b03198316146105a5565b8786811461061b5760405162461bcd60e51b815260040161057990612885565b80841461063a5760405162461bcd60e51b815260040161057990612885565b8082146106595760405162461bcd60e51b815260040161057990612885565b60005b81811015610705576106f38b8b83818110610679576106796128bc565b905060200201602081019061068e91906127ec565b8a8a848181106106a0576106a06128bc565b90506020020135898989868181106106ba576106ba6128bc565b90506020020160208101906106cf91906128d2565b8888878181106106e1576106e16128bc565b905060200281019061050d91906128ed565b806106fd8161294c565b91505061065c565b5050505050505050505050565b6000818152600a6020526040902080546060919061072f90612965565b80601f016020809104026020016040519081016040528092919081815260200182805461075b90612965565b80156107a85780601f1061077d576101008083540402835291602001916107a8565b820191906000526020600020905b81548152906001019060200180831161078b57829003601f168201915b50505050509050919050565b600a60205260009081526040902080546107cd90612965565b80601f01602080910402602001604051908101604052809291908181526020018280546107f990612965565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b600061085960055490565b905090565b6000838360076000838360405160200161087992919061299f565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16156108de5760405162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081c185d5cd95960a21b6044820152606401610579565b604051633ae05cff60e11b8152600481018690526001600160a01b038581166024830152600091908816906375c0b9fe90604401602060405180830381865afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095391906129bc565b6040516310bfff0b60e31b8152600481018890529091506000906001600160a01b038916906385fff85890602401602060405180830381865afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c291906129bc565b905080600003610a045760405162461bcd60e51b815260206004820152600d60248201526c506f6f6c20697320656d70747960981b6044820152606401610579565b60408051606081018252600a8152606460208201526105dc918101919091526000805b60038160ff161015610a8e57612710838260ff1660038110610a4b57610a4b6128bc565b6020020151610a5e9061ffff16866129d5565b610a6891906129f4565b8510610a8e5781610a7881612a16565b9250508080610a8690612a16565b915050610a27565b509998505050505050505050565b6001600160a01b038516331480610ab85750610ab885336104a2565b610ad45760405162461bcd60e51b815260040161057990612a35565b610ae18585858585611480565b5050505050565b610af0611fdf565b60086000610afe8686610c44565b815260208101919091526040016000205460ff16610b555760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610579565b60015b610b6385858561085e565b60ff168160ff1611610be95760096000610b7e878785610bf1565b8152602080820192909252604090810160009081206001600160a01b038716825290925290205460ff16610bd757600182610bb98284612a83565b60ff1660038110610bcc57610bcc6128bc565b911515602090920201525b80610be181612a16565b915050610b58565b509392505050565b6040805160609490941b6001600160601b031916602080860191909152603485019390935260f89190911b6001600160f81b03191660548401528051603581850301815260559093019052815191012090565b60008282604051602001610c5992919061299f565b60405160208183030381529060405280519060200120905092915050565b60608151835114610cdc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610579565b600083516001600160401b03811115610cf757610cf7612252565b604051908082528060200260200182016040528015610d20578160200160208202803683370190505b50905060005b8451811015610be957610d6b858281518110610d4457610d446128bc565b6020026020010151858381518110610d5e57610d5e6128bc565b6020026020010151610512565b828281518110610d7d57610d7d6128bc565b6020908102919091010152610d918161294c565b9050610d26565b610da061165d565b610daa60006116b7565b565b83828114610dcc5760405162461bcd60e51b815260040161057990612885565b60005b81811015610e3257610e20878783818110610dec57610dec6128bc565b9050602002016020810190610e0191906127ec565b868684818110610e1357610e136128bc565b9050602002013585611185565b80610e2a8161294c565b915050610dcf565b50505050505050565b610e46338383611709565b5050565b610e5261165d565b6000600760008484604051602001610e6b92919061299f565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555080826001600160a01b03167f5e8526ee3954b37e3817ddd2a2af5028e0bd006511f190d1deeb43d15d0a18cd60405160405180910390a35050565b610ee961165d565b6006544211610f3a5760405162461bcd60e51b815260206004820181905260248201527f4d696e74696e6720646561646c696e6520776173206e6f7420726561636865646044820152606401610579565b804210610f895760405162461bcd60e51b815260206004820152601b60248201527f4e657720646561646c696e6520616c72656164792070617373656400000000006044820152606401610579565b600482905560068190556040517f0321d29aa78655def372c63c55cdf9813510b8e8f5263d109dc5554a405b4ed890610fc790859085908590612a9c565b60405180910390a1505050565b610fdc61165d565b60086000610fea8585610c44565b815260208101919091526040016000205460ff16156110425760405162461bcd60e51b81526020600482015260146024820152735661756c7420616c72656164792065786973747360601b6044820152606401610579565b6001600860006110528686610c44565b81526020810191909152604001600020805460ff191691151591909117905560015b60038160ff16116110e8578161108c8260ff166117e9565b60405160200161109d929190612ac1565b604051602081830303815290604052600a60006110bb878786610bf1565b815260200190815260200160002090816110d59190612b3b565b50806110e081612a16565b915050611074565b50505050565b6110f661165d565b600160076000848460405160200161110f92919061299f565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555080826001600160a01b03167f57847ecb0caf57ab272aebf4d12c2e00b717d17e11280577d5302fd2f6a901ae60405160405180910390a35050565b600061119284848461085e565b905060ff8116156110e8576110e88484848461187b565b6000806111b785858561085e565b905060ff81161580159061122a5750600860006111d48787610c44565b815260208101919091526040016000205460ff16801561122a5750600960006111fe878785610bf1565b8152602080820192909252604090810160009081206001600160a01b038716825290925290205460ff16155b95945050505050565b6001600160a01b03851633148061124f575061124f85336104a2565b61126b5760405162461bcd60e51b815260040161057990612a35565b610ae18585858585611999565b61128061165d565b6001600160a01b0381166112e55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610579565b6112ee816116b7565b50565b858560076000838360405160200161130a92919061299f565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161561136f5760405162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081c185d5cd95960a21b6044820152606401610579565b60065442106113c05760405162461bcd60e51b815260206004820152601760248201527f4d696e74696e6720646561646c696e65207061737365640000000000000000006044820152606401610579565b6040805160608a811b6001600160601b0319908116602080850191909152603484018c9052918a901b16605483015260f888901b6001600160f81b031916606883015282516049818403018152606990920190925280519101206114279085908590611ac3565b61146a5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21036b2b935b63290383937b7b360611b6044820152606401610579565b6114768888888861187b565b5050505050505050565b81518351146114e25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610579565b6001600160a01b0384166115085760405162461bcd60e51b815260040161057990612bfa565b3360005b84518110156115ef576000858281518110611529576115296128bc565b602002602001015190506000858381518110611547576115476128bc565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156115975760405162461bcd60e51b815260040161057990612c3f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906115d4908490612c89565b92505081905550505050806115e89061294c565b905061150c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161163f929190612c9c565b60405180910390a4611655818787878787611adb565b505050505050565b6003546001600160a01b03163314610daa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610579565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361177c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610579565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606060006117f683611c36565b60010190506000816001600160401b0381111561181557611815612252565b6040519080825280601f01601f19166020018201604052801561183f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461184957509392505050565b600860006118898686610c44565b815260208101919091526040016000205460ff166118e05760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610579565b60015b8160ff168160ff1611610ae157600960006118ff878785610bf1565b8152602080820192909252604090810160009081206001600160a01b038716825290925290205460ff166119875760016009600061193e888886610bf1565b8152602080820192909252604090810160009081206001600160a01b03881682529092529020805460ff191691151591909117905561198783611982878785610bf1565b611d0e565b8061199181612a16565b9150506118e3565b6001600160a01b0384166119bf5760405162461bcd60e51b815260040161057990612bfa565b3360006119cb85611d38565b905060006119d885611d38565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015611a1b5760405162461bcd60e51b815260040161057990612c3f565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611a58908490612c89565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ab8848a8a8a8a8a611d83565b505050505050505050565b6000611ad3848460045485611e3e565b949350505050565b6001600160a01b0384163b156116555760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b1f9089908990889088908890600401612cc1565b6020604051808303816000875af1925050508015611b5a575060408051601f3d908101601f19168201909252611b5791810190612d1f565b60015b611c0657611b66612d3c565b806308c379a003611b9f5750611b7a612d58565b80611b855750611ba1565b8060405162461bcd60e51b81526004016105799190612203565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610579565b6001600160e01b0319811663bc197c8160e01b14610e325760405162461bcd60e51b815260040161057990612de1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611c755772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ca1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611cbf57662386f26fc10000830492506010015b6305f5e1008310611cd7576305f5e100830492506008015b6127108310611ceb57612710830492506004015b60648310611cfd576064830492506002015b600a83106105a55760010192915050565b611d1c600580546001019055565b610e468282600160405180602001604052806000815250611e56565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d7257611d726128bc565b602090810291909101015292915050565b6001600160a01b0384163b156116555760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611dc79089908990889088908890600401612e29565b6020604051808303816000875af1925050508015611e02575060408051601f3d908101601f19168201909252611dff91810190612d1f565b60015b611e0e57611b66612d3c565b6001600160e01b0319811663f23a6e6160e01b14610e325760405162461bcd60e51b815260040161057990612de1565b600082611e4c868685611f61565b1495945050505050565b6001600160a01b038416611eb65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610579565b336000611ec285611d38565b90506000611ecf85611d38565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611f01908490612c89565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e3283600089898989611d83565b600081815b84811015611fa457611f9082878784818110611f8457611f846128bc565b90506020020135611fad565b915080611f9c8161294c565b915050611f66565b50949350505050565b6000818310611fc9576000828152602084905260409020611fd8565b60008381526020839052604090205b9392505050565b60405180606001604052806003906020820280368337509192915050565b80356001600160a01b038116811461201457600080fd5b919050565b6000806040838503121561202c57600080fd5b61203583611ffd565b946020939093013593505050565b6001600160e01b0319811681146112ee57600080fd5b60006020828403121561206b57600080fd5b8135611fd881612043565b60008083601f84011261208857600080fd5b5081356001600160401b0381111561209f57600080fd5b6020830191508360208260051b85010111156120ba57600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156120df57600080fd5b89356001600160401b03808211156120f657600080fd5b6121028d838e01612076565b909b50995060208c013591508082111561211b57600080fd5b6121278d838e01612076565b909950975087915061213b60408d01611ffd565b965060608c013591508082111561215157600080fd5b61215d8d838e01612076565b909650945060808c013591508082111561217657600080fd5b506121838c828d01612076565b915080935050809150509295985092959850929598565b6000602082840312156121ac57600080fd5b5035919050565b60005b838110156121ce5781810151838201526020016121b6565b50506000910152565b600081518084526121ef8160208601602086016121b3565b601f01601f19169290920160200192915050565b602081526000611fd860208301846121d7565b60008060006060848603121561222b57600080fd5b61223484611ffd565b92506020840135915061224960408501611ffd565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561228d5761228d612252565b6040525050565b60006001600160401b038211156122ad576122ad612252565b5060051b60200190565b600082601f8301126122c857600080fd5b813560206122d582612294565b6040516122e28282612268565b83815260059390931b850182019282810191508684111561230257600080fd5b8286015b8481101561231d5780358352918301918301612306565b509695505050505050565b600082601f83011261233957600080fd5b81356001600160401b0381111561235257612352612252565b604051612369601f8301601f191660200182612268565b81815284602083860101111561237e57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156123b357600080fd5b6123bc86611ffd565b94506123ca60208701611ffd565b935060408601356001600160401b03808211156123e657600080fd5b6123f289838a016122b7565b9450606088013591508082111561240857600080fd5b61241489838a016122b7565b9350608088013591508082111561242a57600080fd5b5061243788828901612328565b9150509295509295909350565b60608101818360005b600381101561246e578151151583526020928301929091019060010161244d565b50505092915050565b803560ff8116811461201457600080fd5b60008060006060848603121561249d57600080fd5b6124a684611ffd565b92506020840135915061224960408501612477565b600080604083850312156124ce57600080fd5b82356001600160401b03808211156124e557600080fd5b818501915085601f8301126124f957600080fd5b8135602061250682612294565b6040516125138282612268565b83815260059390931b850182019282810191508984111561253357600080fd5b948201945b838610156125585761254986611ffd565b82529482019490820190612538565b9650508601359250508082111561256e57600080fd5b5061257b858286016122b7565b9150509250929050565b600081518084526020808501945080840160005b838110156125b557815187529582019590820190600101612599565b509495945050505050565b602081526000611fd86020830184612585565b6000806000806000606086880312156125eb57600080fd5b85356001600160401b038082111561260257600080fd5b61260e89838a01612076565b9097509550602088013591508082111561262757600080fd5b5061263488828901612076565b9094509250612647905060408701611ffd565b90509295509295909350565b6000806040838503121561266657600080fd5b61266f83611ffd565b91506020830135801515811461268457600080fd5b809150509250929050565b600080604083850312156126a257600080fd5b823591506126b260208401611ffd565b90509250929050565b6000806000606084860312156126d057600080fd5b83356001600160401b038111156126e657600080fd5b6126f286828701612328565b9660208601359650604090950135949350505050565b60008060006060848603121561271d57600080fd5b61272684611ffd565b92506020840135915060408401356001600160401b0381111561274857600080fd5b61275486828701612328565b9150509250925092565b6000806040838503121561277157600080fd5b61277a83611ffd565b91506126b260208401611ffd565b600080600080600060a086880312156127a057600080fd5b6127a986611ffd565b94506127b760208701611ffd565b9350604086013592506060860135915060808601356001600160401b038111156127e057600080fd5b61243788828901612328565b6000602082840312156127fe57600080fd5b611fd882611ffd565b60008060008060008060a0878903121561282057600080fd5b61282987611ffd565b95506020870135945061283e60408801611ffd565b935061284c60608801612477565b925060808701356001600160401b0381111561286757600080fd5b61287389828a01612076565b979a9699509497509295939492505050565b60208082526019908201527f417272617973206c656e67746873206d757374206d6174636800000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156128e457600080fd5b611fd882612477565b6000808335601e1984360301811261290457600080fd5b8301803591506001600160401b0382111561291e57600080fd5b6020019150600581901b36038213156120ba57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161295e5761295e612936565b5060010190565b600181811c9082168061297957607f821691505b60208210810361299957634e487b7160e01b600052602260045260246000fd5b50919050565b60609290921b6001600160601b0319168252601482015260340190565b6000602082840312156129ce57600080fd5b5051919050565b60008160001904831182151516156129ef576129ef612936565b500290565b600082612a1157634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff8103612a2c57612a2c612936565b60010192915050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60ff82811682821603908111156105a5576105a5612936565b606081526000612aaf60608301866121d7565b60208301949094525060400152919050565b60008351612ad38184602088016121b3565b835190830190612ae78183602088016121b3565b01949350505050565b601f821115612b3657600081815260208120601f850160051c81016020861015612b175750805b601f850160051c820191505b8181101561165557828155600101612b23565b505050565b81516001600160401b03811115612b5457612b54612252565b612b6881612b628454612965565b84612af0565b602080601f831160018114612b9d5760008415612b855750858301515b600019600386901b1c1916600185901b178555611655565b600085815260208120601f198616915b82811015612bcc57888601518255948401946001909101908401612bad565b5085821015612bea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156105a5576105a5612936565b604081526000612caf6040830185612585565b828103602084015261122a8185612585565b6001600160a01b0386811682528516602082015260a060408201819052600090612ced90830186612585565b8281036060840152612cff8186612585565b90508281036080840152612d1381856121d7565b98975050505050505050565b600060208284031215612d3157600080fd5b8151611fd881612043565b600060033d1115612d555760046000803e5060005160e01c5b90565b600060443d1015612d665790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612d9557505050505090565b8285019150815181811115612dad5750505050505090565b843d8701016020828501011115612dc75750505050505090565b612dd660208286010187612268565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612e63908301846121d7565b97965050505050505056fea2646970667358221220f5d2d2e9046fcc975818f469d7dddf410621234dbce75ff0ed48c1c856658bb964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply()": {
        "details": "Returns thze total tokens minted so far."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTree(string,bytes32,uint256)": {
        "details": "Update the merkle tree root only after  the deadline for minting has been reached.",
        "params": {
          "_deadline": "number of days to the next minting deadline.",
          "_merkleTreeIPFSRef": "new merkle tree ipfs reference.",
          "_root": "new merkle tree root to use for verifying."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5070,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5076,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5078,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3867,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 20158,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "root",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 20161,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "totalSupplyCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)8763_storage"
      },
      {
        "astId": 20163,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "deadline",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20173,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "pausedVaults",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 20177,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "vaultsRegistered",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 20183,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "tokensRedeemed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20187,
        "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
        "label": "uris",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)8763_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8762,
            "contract": "contracts/nft/HATVaultsNFT.sol:HATVaultsNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}