{
  "address": "0xe198cbb727758b9ad38a12e1ad475a843e5e730f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterCopy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "masterCopy",
          "type": "address"
        }
      ],
      "name": "MasterCopyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "initHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingCliffTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITokenLock.Revocability",
          "name": "revocable",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "canDelegate",
          "type": "bool"
        }
      ],
      "name": "TokenLockCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_managedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_periods",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_releaseStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingCliffTime",
          "type": "uint256"
        },
        {
          "internalType": "enum ITokenLock.Revocability",
          "name": "_revocable",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_canDelegate",
          "type": "bool"
        }
      ],
      "name": "createTokenLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterCopy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterCopy",
          "type": "address"
        }
      ],
      "name": "setMasterCopy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6cee380f0cd428c47f96b07ec39dac0e25be6f90c1106c9f241ff490bdec176a",
  "receipt": {
    "to": null,
    "from": "0x1885b7c7a3ae1f35ba71c0392c13153a95c4914f",
    "contractAddress": "0xe198cbb727758b9ad38a12e1ad475a843e5e730f",
    "transactionIndex": "0x1e",
    "gasUsed": "0x90c7d",
    "logsBloom": "0x00000000000000000000000000008000000004000000000000800000000000000000000000000000000001000000010000000002000000000000000000000000000040000000000000000000000000000001000000000000000000400002000000000000028000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000080000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000020000020000000200000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0b31a975f40c2d2dc14a7266fe73854b2fe06f67d7f0be90b272b2ec13a8b118",
    "transactionHash": "0x6cee380f0cd428c47f96b07ec39dac0e25be6f90c1106c9f241ff490bdec176a",
    "logs": [
      {
        "address": "0xe198cbb727758b9ad38a12e1ad475a843e5e730f",
        "blockHash": "0x0b31a975f40c2d2dc14a7266fe73854b2fe06f67d7f0be90b272b2ec13a8b118",
        "blockNumber": "0xfe95a8",
        "data": "0x",
        "logIndex": "0x34",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f"
        ],
        "transactionHash": "0x6cee380f0cd428c47f96b07ec39dac0e25be6f90c1106c9f241ff490bdec176a",
        "transactionIndex": "0x1e"
      },
      {
        "address": "0xe198cbb727758b9ad38a12e1ad475a843e5e730f",
        "blockHash": "0x0b31a975f40c2d2dc14a7266fe73854b2fe06f67d7f0be90b272b2ec13a8b118",
        "blockNumber": "0xfe95a8",
        "data": "0x",
        "logIndex": "0x35",
        "removed": false,
        "topics": [
          "0x30909084afc859121ffc3a5aef7fe37c540a9a1ef60bd4d8dcdb76376fadf9de",
          "0x000000000000000000000000d978eb90eb1b11213e320f4e6e910eb98d8df1e4"
        ],
        "transactionHash": "0x6cee380f0cd428c47f96b07ec39dac0e25be6f90c1106c9f241ff490bdec176a",
        "transactionIndex": "0x1e"
      },
      {
        "address": "0xe198cbb727758b9ad38a12e1ad475a843e5e730f",
        "blockHash": "0x0b31a975f40c2d2dc14a7266fe73854b2fe06f67d7f0be90b272b2ec13a8b118",
        "blockNumber": "0xfe95a8",
        "data": "0x",
        "logIndex": "0x36",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001885b7c7a3ae1f35ba71c0392c13153a95c4914f",
          "0x00000000000000000000000007368f6a959ef3096230a258dd0af692699c3a4c"
        ],
        "transactionHash": "0x6cee380f0cd428c47f96b07ec39dac0e25be6f90c1106c9f241ff490bdec176a",
        "transactionIndex": "0x1e"
      }
    ],
    "blockNumber": "0xfe95a8",
    "cumulativeGasUsed": "0x2b5700",
    "status": "0x1"
  },
  "args": [
    "0xd978eb90eb1b11213e320f4e6e910eb98d8df1e4",
    "0x07368F6a959Ef3096230a258dd0af692699c3a4c"
  ],
  "numDeployments": 1,
  "solcInputHash": "8186de70a6a6f54b1b5e651788d825b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterCopy\",\"type\":\"address\"}],\"name\":\"MasterCopyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"initHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingCliffTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITokenLock.Revocability\",\"name\":\"revocable\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canDelegate\",\"type\":\"bool\"}],\"name\":\"TokenLockCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliffTime\",\"type\":\"uint256\"},{\"internalType\":\"enum ITokenLock.Revocability\",\"name\":\"_revocable\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_canDelegate\",\"type\":\"bool\"}],\"name\":\"createTokenLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterCopy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"setMasterCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_governance\":\"Owner of the factory\",\"_masterCopy\":\"Address of the master copy to use to clone proxies\"}},\"createTokenLock(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bool)\":{\"params\":{\"_beneficiary\":\"Address of the beneficiary of locked tokens\",\"_canDelegate\":\"Whether the contract should call delegate\",\"_endTime\":\"End time of the release schedule\",\"_managedAmount\":\"Amount of tokens to be managed by the lock contract\",\"_owner\":\"Address of the contract owner\",\"_periods\":\"Number of periods between start time and end time\",\"_releaseStartTime\":\"Override time for when the releases start\",\"_revocable\":\"Whether the contract is revocable\",\"_startTime\":\"Start time of the release schedule\",\"_token\":\"token to time lock\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMasterCopy(address)\":{\"params\":{\"_masterCopy\":\"Address of contract bytecode to factory clone\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TokenLockFactory  a factory of TokenLock contracts. This contract receives funds to make the process of creating TokenLock contracts easier by distributing them the initial tokens to be managed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"createTokenLock(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bool)\":{\"notice\":\"Creates and fund a new token lock wallet using a minimum proxy\"},\"setMasterCopy(address)\":{\"notice\":\"Sets the masterCopy bytecode to use to create clones of TokenLock contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokenlock/TokenLockFactory.sol\":\"TokenLockFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/tokenlock/ITokenLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITokenLock {\\n    enum Revocability { NotSet, Enabled, Disabled }\\n\\n    // -- Value Transfer --\\n\\n    function release() external;\\n\\n    function withdrawSurplus(uint256 _amount) external;\\n\\n    function revoke() external;\\n\\n    // -- Balances --\\n\\n    function currentBalance() external view returns (uint256);\\n\\n    // -- Time & Periods --\\n\\n    function currentTime() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function sinceStartTime() external view returns (uint256);\\n\\n    function amountPerPeriod() external view returns (uint256);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function currentPeriod() external view returns (uint256);\\n\\n    function passedPeriods() external view returns (uint256);\\n\\n    // -- Locking & Release Schedule --\\n\\n    function availableAmount() external view returns (uint256);\\n\\n    function vestedAmount() external view returns (uint256);\\n\\n    function releasableAmount() external view returns (uint256);\\n\\n    function totalOutstandingAmount() external view returns (uint256);\\n\\n    function surplusAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0c902ff364462c8b2e13a8f18597ace719f50ed53127118a4f32e298e2f0e148\",\"license\":\"MIT\"},\"contracts/tokenlock/ITokenLockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./ITokenLock.sol\\\";\\n\\ninterface ITokenLockFactory {\\n    // -- Factory --\\n    function setMasterCopy(address _masterCopy) external;\\n\\n    function createTokenLock(\\n        address _token,\\n        address _owner,\\n        address _beneficiary,\\n        uint256 _managedAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _periods,\\n        uint256 _releaseStartTime,\\n        uint256 _vestingCliffTime,\\n        ITokenLock.Revocability _revocable,\\n        bool _canDelegate\\n    ) external returns(address contractAddress);\\n}\\n\",\"keccak256\":\"0x06f2fb4e97fa837dfc047a92e82ae590e4f2633ad1009983175b225c1dc135d1\",\"license\":\"MIT\"},\"contracts/tokenlock/TokenLockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./ITokenLockFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/**\\n * @title TokenLockFactory\\n *  a factory of TokenLock contracts.\\n *\\n * This contract receives funds to make the process of creating TokenLock contracts\\n * easier by distributing them the initial tokens to be managed.\\n */\\ncontract TokenLockFactory is ITokenLockFactory, Ownable {\\n    // -- State --\\n\\n    address public masterCopy;\\n\\n    // -- Events --\\n\\n    event MasterCopyUpdated(address indexed masterCopy);\\n\\n    event TokenLockCreated(\\n        address indexed contractAddress,\\n        bytes32 indexed initHash,\\n        address indexed beneficiary,\\n        address token,\\n        uint256 managedAmount,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 periods,\\n        uint256 releaseStartTime,\\n        uint256 vestingCliffTime,\\n        ITokenLock.Revocability revocable,\\n        bool canDelegate\\n    );\\n\\n    /**\\n     * Constructor.\\n     * @param _masterCopy Address of the master copy to use to clone proxies\\n     * @param _governance Owner of the factory\\n     */\\n    constructor(address _masterCopy, address _governance) {\\n        setMasterCopy(_masterCopy);\\n        _transferOwnership(_governance);\\n    }\\n\\n    // -- Factory --\\n    /**\\n     * @notice Creates and fund a new token lock wallet using a minimum proxy\\n     * @param _token token to time lock\\n     * @param _owner Address of the contract owner\\n     * @param _beneficiary Address of the beneficiary of locked tokens\\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\\n     * @param _startTime Start time of the release schedule\\n     * @param _endTime End time of the release schedule\\n     * @param _periods Number of periods between start time and end time\\n     * @param _releaseStartTime Override time for when the releases start\\n     * @param _revocable Whether the contract is revocable\\n     * @param _canDelegate Whether the contract should call delegate\\n     */\\n    function createTokenLock(\\n        address _token,\\n        address _owner,\\n        address _beneficiary,\\n        uint256 _managedAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _periods,\\n        uint256 _releaseStartTime,\\n        uint256 _vestingCliffTime,\\n        ITokenLock.Revocability _revocable,\\n        bool _canDelegate\\n    ) external override returns(address contractAddress) {\\n        // Create contract using a minimal proxy and call initializer\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bool)\\\",\\n            _owner,\\n            _beneficiary,\\n            _token,\\n            _managedAmount,\\n            _startTime,\\n            _endTime,\\n            _periods,\\n            _releaseStartTime,\\n            _vestingCliffTime,\\n            _revocable,\\n            _canDelegate\\n        );\\n\\n        contractAddress = deployProxyPrivate(initializer,\\n        _beneficiary,\\n        _token,\\n        _managedAmount,\\n        _startTime,\\n        _endTime,\\n        _periods,\\n        _releaseStartTime,\\n        _vestingCliffTime,\\n        _revocable,\\n        _canDelegate);\\n    }\\n\\n    /**\\n     * @notice Sets the masterCopy bytecode to use to create clones of TokenLock contracts\\n     * @param _masterCopy Address of contract bytecode to factory clone\\n     */\\n    function setMasterCopy(address _masterCopy) public override onlyOwner {\\n        require(_masterCopy != address(0), \\\"MasterCopy cannot be zero\\\");\\n        masterCopy = _masterCopy;\\n        emit MasterCopyUpdated(_masterCopy);\\n    }\\n\\n    //this private function is to handle stack too deep issue\\n    function  deployProxyPrivate(\\n        bytes memory _initializer,\\n        address _beneficiary,\\n        address _token,\\n        uint256 _managedAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _periods,\\n        uint256 _releaseStartTime,\\n        uint256 _vestingCliffTime,\\n        ITokenLock.Revocability _revocable,\\n        bool _canDelegate\\n    ) private returns (address contractAddress) {\\n\\n        contractAddress = Clones.clone(masterCopy);\\n\\n        Address.functionCall(contractAddress, _initializer);\\n\\n        emit TokenLockCreated(\\n            contractAddress,\\n            keccak256(_initializer),\\n            _beneficiary,\\n            _token,\\n            _managedAmount,\\n            _startTime,\\n            _endTime,\\n            _periods,\\n            _releaseStartTime,\\n            _vestingCliffTime,\\n            _revocable,\\n            _canDelegate\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x254e43c7529f51f8a43c7c500fe923ccc44bce35f393974f890a167af7acfc8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ac1380380610ac183398101604081905261002f916101c6565b61003833610051565b610041826100a1565b61004a81610051565b50506101f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100a961014e565b6001600160a01b0381166101045760405162461bcd60e51b815260206004820152601960248201527f4d6173746572436f70792063616e6e6f74206265207a65726f0000000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f30909084afc859121ffc3a5aef7fe37c540a9a1ef60bd4d8dcdb76376fadf9de90600090a250565b6000546001600160a01b031633146101a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100fb565b565b80516001600160a01b03811681146101c157600080fd5b919050565b600080604083850312156101d957600080fd5b6101e2836101aa565b91506101f0602084016101aa565b90509250929050565b6108b9806102086000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063a619486e1461009a578063cf497e6c146100ad578063e95cd051146100c0578063f2fde38b146100d3575b600080fd5b61006f6100e6565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b60015461007e906001600160a01b031681565b61006f6100bb366004610650565b6100fa565b61007e6100ce36600461066b565b6101a7565b61006f6100e1366004610650565b61021f565b6100ee610298565b6100f860006102f2565b565b610102610298565b6001600160a01b03811661015d5760405162461bcd60e51b815260206004820152601960248201527f4d6173746572436f70792063616e6e6f74206265207a65726f0000000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f30909084afc859121ffc3a5aef7fe37c540a9a1ef60bd4d8dcdb76376fadf9de90600090a250565b6000808b8b8e8c8c8c8c8c8c8c8c6040516024016101cf9b9a9998979695949392919061073e565b60408051601f198184030181529190526020810180516001600160e01b0316630628fcd560e31b179052905061020e818c8f8d8d8d8d8d8d8d8d610342565b9d9c50505050505050505050505050565b610227610298565b6001600160a01b03811661028c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610154565b610295816102f2565b50565b6000546001600160a01b031633146100f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610154565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015460009061035a906001600160a01b03166103d9565b9050610366818d610473565b508a6001600160a01b03168c80519060200120826001600160a01b03167f5dc8081a59af8558f066632d894f2447785b2967a1d042627a424360e5bb882e8d8d8d8d8d8d8d8d8d6040516103c2999897969594939291906107b1565b60405180910390a49b9a5050505050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661046e5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610154565b919050565b60606104b7838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506104be565b9392505050565b60608247101561051f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610154565b600080866001600160a01b0316858760405161053b9190610834565b60006040518083038185875af1925050503d8060008114610578576040519150601f19603f3d011682016040523d82523d6000602084013e61057d565b606091505b509150915061058e8783838761059b565b925050505b949350505050565b6060831561060a578251600003610603576001600160a01b0385163b6106035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610154565b5081610593565b610593838381511561061f5781518083602001fd5b8060405162461bcd60e51b81526004016101549190610850565b80356001600160a01b038116811461046e57600080fd5b60006020828403121561066257600080fd5b6104b782610639565b60008060008060008060008060008060006101608c8e03121561068d57600080fd5b6106968c610639565b9a506106a460208d01610639565b99506106b260408d01610639565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506101008c013592506101208c0135600381106106f257600080fd5b91506101408c0135801515811461070857600080fd5b809150509295989b509295989b9093969950565b6003811061073a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c811682528b811660208301528a166040820152606081018990526080810188905260a0810187905260c0810186905260e081018590526101008101849052610160810161079861012083018561071c565b8215156101408301529c9b505050505050505050505050565b6001600160a01b038a1681526020810189905260408101889052606081018790526080810186905260a0810185905260c0810184905261012081016107f960e083018561071c565b8215156101008301529a9950505050505050505050565b60005b8381101561082b578181015183820152602001610813565b50506000910152565b60008251610846818460208701610810565b9190910192915050565b602081526000825180602084015261086f816040850160208701610810565b601f01601f1916919091016040019291505056fea2646970667358221220533e41e8d48fcae8056ad9a95589d7884140da9a958024180bfa46a2ec461bd964736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063a619486e1461009a578063cf497e6c146100ad578063e95cd051146100c0578063f2fde38b146100d3575b600080fd5b61006f6100e6565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b60015461007e906001600160a01b031681565b61006f6100bb366004610650565b6100fa565b61007e6100ce36600461066b565b6101a7565b61006f6100e1366004610650565b61021f565b6100ee610298565b6100f860006102f2565b565b610102610298565b6001600160a01b03811661015d5760405162461bcd60e51b815260206004820152601960248201527f4d6173746572436f70792063616e6e6f74206265207a65726f0000000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f30909084afc859121ffc3a5aef7fe37c540a9a1ef60bd4d8dcdb76376fadf9de90600090a250565b6000808b8b8e8c8c8c8c8c8c8c8c6040516024016101cf9b9a9998979695949392919061073e565b60408051601f198184030181529190526020810180516001600160e01b0316630628fcd560e31b179052905061020e818c8f8d8d8d8d8d8d8d8d610342565b9d9c50505050505050505050505050565b610227610298565b6001600160a01b03811661028c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610154565b610295816102f2565b50565b6000546001600160a01b031633146100f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610154565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015460009061035a906001600160a01b03166103d9565b9050610366818d610473565b508a6001600160a01b03168c80519060200120826001600160a01b03167f5dc8081a59af8558f066632d894f2447785b2967a1d042627a424360e5bb882e8d8d8d8d8d8d8d8d8d6040516103c2999897969594939291906107b1565b60405180910390a49b9a5050505050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661046e5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610154565b919050565b60606104b7838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506104be565b9392505050565b60608247101561051f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610154565b600080866001600160a01b0316858760405161053b9190610834565b60006040518083038185875af1925050503d8060008114610578576040519150601f19603f3d011682016040523d82523d6000602084013e61057d565b606091505b509150915061058e8783838761059b565b925050505b949350505050565b6060831561060a578251600003610603576001600160a01b0385163b6106035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610154565b5081610593565b610593838381511561061f5781518083602001fd5b8060405162461bcd60e51b81526004016101549190610850565b80356001600160a01b038116811461046e57600080fd5b60006020828403121561066257600080fd5b6104b782610639565b60008060008060008060008060008060006101608c8e03121561068d57600080fd5b6106968c610639565b9a506106a460208d01610639565b99506106b260408d01610639565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506101008c013592506101208c0135600381106106f257600080fd5b91506101408c0135801515811461070857600080fd5b809150509295989b509295989b9093969950565b6003811061073a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c811682528b811660208301528a166040820152606081018990526080810188905260a0810187905260c0810186905260e081018590526101008101849052610160810161079861012083018561071c565b8215156101408301529c9b505050505050505050505050565b6001600160a01b038a1681526020810189905260408101889052606081018790526080810186905260a0810185905260c0810184905261012081016107f960e083018561071c565b8215156101008301529a9950505050505050505050565b60005b8381101561082b578181015183820152602001610813565b50506000910152565b60008251610846818460208701610810565b9190910192915050565b602081526000825180602084015261086f816040850160208701610810565b601f01601f1916919091016040019291505056fea2646970667358221220533e41e8d48fcae8056ad9a95589d7884140da9a958024180bfa46a2ec461bd964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_governance": "Owner of the factory",
          "_masterCopy": "Address of the master copy to use to clone proxies"
        }
      },
      "createTokenLock(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bool)": {
        "params": {
          "_beneficiary": "Address of the beneficiary of locked tokens",
          "_canDelegate": "Whether the contract should call delegate",
          "_endTime": "End time of the release schedule",
          "_managedAmount": "Amount of tokens to be managed by the lock contract",
          "_owner": "Address of the contract owner",
          "_periods": "Number of periods between start time and end time",
          "_releaseStartTime": "Override time for when the releases start",
          "_revocable": "Whether the contract is revocable",
          "_startTime": "Start time of the release schedule",
          "_token": "token to time lock"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMasterCopy(address)": {
        "params": {
          "_masterCopy": "Address of contract bytecode to factory clone"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TokenLockFactory  a factory of TokenLock contracts. This contract receives funds to make the process of creating TokenLock contracts easier by distributing them the initial tokens to be managed.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "createTokenLock(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bool)": {
        "notice": "Creates and fund a new token lock wallet using a minimum proxy"
      },
      "setMasterCopy(address)": {
        "notice": "Sets the masterCopy bytecode to use to create clones of TokenLock contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3867,
        "contract": "contracts/tokenlock/TokenLockFactory.sol:TokenLockFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22149,
        "contract": "contracts/tokenlock/TokenLockFactory.sol:TokenLockFactory",
        "label": "masterCopy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}